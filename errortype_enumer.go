// Code generated by "enumer -json -text -sql -type ErrorType -transform snake -trimprefix ErrorType"; DO NOT EDIT.

package zencached

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ErrorTypeName = "undefinedmax_reconnections_reachedmemcached_invalid_responsememcached_no_responsetelnet_connection_is_closedno_available_nodesno_available_connections"

var _ErrorTypeIndex = [...]uint8{0, 9, 34, 60, 81, 108, 126, 150}

const _ErrorTypeLowerName = "undefinedmax_reconnections_reachedmemcached_invalid_responsememcached_no_responsetelnet_connection_is_closedno_available_nodesno_available_connections"

func (i ErrorType) String() string {
	if i >= ErrorType(len(_ErrorTypeIndex)-1) {
		return fmt.Sprintf("ErrorType(%d)", i)
	}
	return _ErrorTypeName[_ErrorTypeIndex[i]:_ErrorTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ErrorTypeNoOp() {
	var x [1]struct{}
	_ = x[ErrorTypeUndefined-(0)]
	_ = x[ErrorTypeMaxReconnectionsReached-(1)]
	_ = x[ErrorTypeMemcachedInvalidResponse-(2)]
	_ = x[ErrorTypeMemcachedNoResponse-(3)]
	_ = x[ErrorTypeTelnetConnectionIsClosed-(4)]
	_ = x[ErrorTypeNoAvailableNodes-(5)]
	_ = x[ErrorTypeNoAvailableConnections-(6)]
}

var _ErrorTypeValues = []ErrorType{ErrorTypeUndefined, ErrorTypeMaxReconnectionsReached, ErrorTypeMemcachedInvalidResponse, ErrorTypeMemcachedNoResponse, ErrorTypeTelnetConnectionIsClosed, ErrorTypeNoAvailableNodes, ErrorTypeNoAvailableConnections}

var _ErrorTypeNameToValueMap = map[string]ErrorType{
	_ErrorTypeName[0:9]:          ErrorTypeUndefined,
	_ErrorTypeLowerName[0:9]:     ErrorTypeUndefined,
	_ErrorTypeName[9:34]:         ErrorTypeMaxReconnectionsReached,
	_ErrorTypeLowerName[9:34]:    ErrorTypeMaxReconnectionsReached,
	_ErrorTypeName[34:60]:        ErrorTypeMemcachedInvalidResponse,
	_ErrorTypeLowerName[34:60]:   ErrorTypeMemcachedInvalidResponse,
	_ErrorTypeName[60:81]:        ErrorTypeMemcachedNoResponse,
	_ErrorTypeLowerName[60:81]:   ErrorTypeMemcachedNoResponse,
	_ErrorTypeName[81:108]:       ErrorTypeTelnetConnectionIsClosed,
	_ErrorTypeLowerName[81:108]:  ErrorTypeTelnetConnectionIsClosed,
	_ErrorTypeName[108:126]:      ErrorTypeNoAvailableNodes,
	_ErrorTypeLowerName[108:126]: ErrorTypeNoAvailableNodes,
	_ErrorTypeName[126:150]:      ErrorTypeNoAvailableConnections,
	_ErrorTypeLowerName[126:150]: ErrorTypeNoAvailableConnections,
}

var _ErrorTypeNames = []string{
	_ErrorTypeName[0:9],
	_ErrorTypeName[9:34],
	_ErrorTypeName[34:60],
	_ErrorTypeName[60:81],
	_ErrorTypeName[81:108],
	_ErrorTypeName[108:126],
	_ErrorTypeName[126:150],
}

// ErrorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ErrorTypeString(s string) (ErrorType, error) {
	if val, ok := _ErrorTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ErrorTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ErrorType values", s)
}

// ErrorTypeValues returns all values of the enum
func ErrorTypeValues() []ErrorType {
	return _ErrorTypeValues
}

// ErrorTypeStrings returns a slice of all String values of the enum
func ErrorTypeStrings() []string {
	strs := make([]string, len(_ErrorTypeNames))
	copy(strs, _ErrorTypeNames)
	return strs
}

// IsAErrorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ErrorType) IsAErrorType() bool {
	for _, v := range _ErrorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ErrorType
func (i ErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ErrorType
func (i *ErrorType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ErrorType should be a string, got %s", data)
	}

	var err error
	*i, err = ErrorTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ErrorType
func (i ErrorType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ErrorType
func (i *ErrorType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ErrorTypeString(string(text))
	return err
}

func (i ErrorType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ErrorType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ErrorType: %[1]T(%[1]v)", value)
	}

	val, err := ErrorTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
