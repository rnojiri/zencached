// Code generated by "enumer -json -text -sql -type ResultType -transform snake -trimprefix ResultType"; DO NOT EDIT.

package zencached

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ResultTypeName = "noneerrorfoundnot_foundnot_storedstoreddeleted"

var _ResultTypeIndex = [...]uint8{0, 4, 9, 14, 23, 33, 39, 46}

const _ResultTypeLowerName = "noneerrorfoundnot_foundnot_storedstoreddeleted"

func (i ResultType) String() string {
	if i >= ResultType(len(_ResultTypeIndex)-1) {
		return fmt.Sprintf("ResultType(%d)", i)
	}
	return _ResultTypeName[_ResultTypeIndex[i]:_ResultTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ResultTypeNoOp() {
	var x [1]struct{}
	_ = x[ResultTypeNone-(0)]
	_ = x[ResultTypeError-(1)]
	_ = x[ResultTypeFound-(2)]
	_ = x[ResultTypeNotFound-(3)]
	_ = x[ResultTypeNotStored-(4)]
	_ = x[ResultTypeStored-(5)]
	_ = x[ResultTypeDeleted-(6)]
}

var _ResultTypeValues = []ResultType{ResultTypeNone, ResultTypeError, ResultTypeFound, ResultTypeNotFound, ResultTypeNotStored, ResultTypeStored, ResultTypeDeleted}

var _ResultTypeNameToValueMap = map[string]ResultType{
	_ResultTypeName[0:4]:        ResultTypeNone,
	_ResultTypeLowerName[0:4]:   ResultTypeNone,
	_ResultTypeName[4:9]:        ResultTypeError,
	_ResultTypeLowerName[4:9]:   ResultTypeError,
	_ResultTypeName[9:14]:       ResultTypeFound,
	_ResultTypeLowerName[9:14]:  ResultTypeFound,
	_ResultTypeName[14:23]:      ResultTypeNotFound,
	_ResultTypeLowerName[14:23]: ResultTypeNotFound,
	_ResultTypeName[23:33]:      ResultTypeNotStored,
	_ResultTypeLowerName[23:33]: ResultTypeNotStored,
	_ResultTypeName[33:39]:      ResultTypeStored,
	_ResultTypeLowerName[33:39]: ResultTypeStored,
	_ResultTypeName[39:46]:      ResultTypeDeleted,
	_ResultTypeLowerName[39:46]: ResultTypeDeleted,
}

var _ResultTypeNames = []string{
	_ResultTypeName[0:4],
	_ResultTypeName[4:9],
	_ResultTypeName[9:14],
	_ResultTypeName[14:23],
	_ResultTypeName[23:33],
	_ResultTypeName[33:39],
	_ResultTypeName[39:46],
}

// ResultTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResultTypeString(s string) (ResultType, error) {
	if val, ok := _ResultTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ResultTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResultType values", s)
}

// ResultTypeValues returns all values of the enum
func ResultTypeValues() []ResultType {
	return _ResultTypeValues
}

// ResultTypeStrings returns a slice of all String values of the enum
func ResultTypeStrings() []string {
	strs := make([]string, len(_ResultTypeNames))
	copy(strs, _ResultTypeNames)
	return strs
}

// IsAResultType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResultType) IsAResultType() bool {
	for _, v := range _ResultTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ResultType
func (i ResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResultType
func (i *ResultType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ResultType should be a string, got %s", data)
	}

	var err error
	*i, err = ResultTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ResultType
func (i ResultType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ResultType
func (i *ResultType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ResultTypeString(string(text))
	return err
}

func (i ResultType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ResultType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ResultType: %[1]T(%[1]v)", value)
	}

	val, err := ResultTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
